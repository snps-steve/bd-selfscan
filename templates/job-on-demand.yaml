{{- if .Values.onDemand.enabled }}
# On-demand scan job - can be triggered via Helm install
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "bd-selfscan.name" . }}-{{ .Values.scanTarget | default "all" | lower | replace " " "-" }}-{{ now | date "20060102-150405" }}
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "bd-selfscan.labels" . | nindent 4 }}
    app.kubernetes.io/component: scanner
    scan-type: on-demand
    {{- if .Values.scanTarget }}
    scan-target: {{ .Values.scanTarget | replace " " "-" | lower }}
    {{- end }}
  annotations:
    {{- if .Values.scanTarget }}
    bd-selfscan/target-application: {{ .Values.scanTarget | quote }}
    {{- end }}
    bd-selfscan/scan-type: "on-demand"
    bd-selfscan/created-by: "helm"
spec:
  # Job configuration
  backoffLimit: {{ .Values.scanner.job.backoffLimit }}
  {{- if .Values.scanner.job.activeDeadlineSeconds }}
  activeDeadlineSeconds: {{ .Values.scanner.job.activeDeadlineSeconds }}
  {{- end }}
  {{- if .Values.scanner.job.ttlSecondsAfterFinished }}
  ttlSecondsAfterFinished: {{ .Values.scanner.job.ttlSecondsAfterFinished }}
  {{- end }}
  parallelism: {{ .Values.scanner.job.parallelism }}
  completions: {{ .Values.scanner.job.completions }}

  template:
    metadata:
      labels:
        {{- include "bd-selfscan.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: scanner
        scan-type: on-demand
      annotations:
        {{- if .Values.scanTarget }}
        bd-selfscan/target-application: {{ .Values.scanTarget | quote }}
        {{- end }}
    spec:
      serviceAccountName: {{ include "bd-selfscan.serviceAccountName" . }}
      restartPolicy: Never

      # Security context
      {{- with .Values.scanner.job.securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      # Node selection
      {{- with .Values.scanner.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      {{- with .Values.scanner.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      {{- with .Values.scanner.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      # Image pull secrets
      {{- with .Values.registry.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      containers:
        - name: scanner
          image: {{ .Values.scanner.image }}
          imagePullPolicy: {{ .Values.scanner.imagePullPolicy }}

          # UPDATED: Command execution with proper error handling and bash shell
          {{- if .Values.scanTarget }}
          # Single application scan
          command: ["/bin/bash"]
          args: 
            - "-c"
            - |
              set -euo pipefail
              echo "Starting single application scan for: {{ .Values.scanTarget }}"
              /scripts/scan-application.sh {{ .Values.scanTarget | quote }}
              exit_code=$?
              echo "Scan completed with exit code: $exit_code"
              exit $exit_code
          {{- else }}
          # All applications scan  
          command: ["/bin/bash"]
          args:
            - "-c" 
            - |
              set -euo pipefail
              echo "Starting scan of all configured applications"
              /scripts/scan-all-applications.sh --yes
              exit_code=$?
              echo "Scan completed with exit code: $exit_code"
              exit $exit_code
          {{- end }}

          # Environment variables
          env:
            # Black Duck configuration
            - name: BD_URL
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.blackduck.tokenSecretName }}
                  key: url
                  optional: false
            - name: BD_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.blackduck.tokenSecretName }}
                  key: token
                  optional: false
            - name: TRUST_CERT
              value: "{{ .Values.blackduck.trustCert }}"

            # Scanning configuration
            - name: PROJECT_TIER
              value: "{{ .Values.scanning.projectTier }}"
            - name: POLICY_FAIL_SEVERITIES
              value: {{ .Values.scanning.policyFailSeverities | quote }}
            - name: IMAGE_DOWNLOAD_TIMEOUT
              value: "{{ .Values.scanning.imageDownloadTimeout }}"
            - name: IMAGE_DOWNLOAD_RETRIES
              value: "{{ .Values.scanning.imageDownloadRetries }}"
            - name: SCAN_TIMEOUT
              value: "{{ .Values.scanning.scanTimeout }}"

            # Debug configuration
            - name: DEBUG_ENABLED
              value: "{{ .Values.debug.enabled }}"
            - name: LOG_LEVEL
              value: {{ .Values.debug.logLevel | quote }}
            - name: KEEP_TEMP_FILES
              value: "{{ .Values.debug.keepTempFiles }}"

            # Job metadata
            - name: JOB_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: JOB_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace

            # Specific scan target (if provided)
            {{- if .Values.scanTarget }}
            - name: SCAN_TARGET
              value: {{ .Values.scanTarget | quote }}
            {{- end }}

            # Configuration file path
            - name: CONFIG_FILE
              value: "/config/applications.yaml"

          # Resource limits
          resources:
            {{- toYaml .Values.scanner.resources | nindent 12 }}

          # Volume mounts
          volumeMounts:
            # Scanner scripts
            - name: scanner-scripts
              mountPath: /scripts
              readOnly: true

            # Application configuration
            - name: applications-config
              mountPath: /config
              readOnly: true

            # Temporary working directory with sufficient space for container images
            - name: temp-storage
              mountPath: /tmp

          # Container security context - enhanced for BDSC operations
          {{- with .Values.scanner.containerSecurityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}

      volumes:
        # Scanner scripts ConfigMap
        - name: scanner-scripts
          configMap:
            name: {{ include "bd-selfscan.name" . }}-scanner-scripts
            defaultMode: 0755

        # Application configuration
        - name: applications-config
          configMap:
            name: {{ .Values.configMap.applications.name }}

        # Temporary storage for downloads and scanning with adequate space
        - name: temp-storage
          emptyDir:
            sizeLimit: {{ .Values.scanner.resources.limits.ephemeralStorage | default "50Gi" }}

{{- end }}
