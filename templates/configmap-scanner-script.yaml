# Scanner Scripts ConfigMap - MISSING TEMPLATE
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "bd-selfscan.name" . }}-scanner-scripts
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "bd-selfscan.labels" . | nindent 4 }}
    app.kubernetes.io/component: scanner-scripts
  annotations:
    description: "Scanner scripts for BD SelfScan container vulnerability scanning"
    bd-selfscan/config-type: "scripts"
data:
  # Core scanning engine
  bdsc-container-scan.sh: |
    {{- (.Files.Get "scripts/bdsc-container-scan.sh") | nindent 4 }}
  
  # Single application wrapper
  scan-application.sh: |
    {{- (.Files.Get "scripts/scan-application.sh") | nindent 4 }}
  
  # Bulk application scanner  
  scan-all-applications.sh: |
    {{- (.Files.Get "scripts/scan-all-applications.sh") | nindent 4 }}
  
  # Utility functions (if needed)
  common-functions.sh: |
    #!/bin/bash
    # Common utility functions for BD SelfScan
    
    # Logging functions with timestamps
    log_info() { 
        echo -e "\033[0;34m[INFO]\033[0m $(date '+%Y-%m-%d %H:%M:%S') $1" 
    }
    
    log_success() { 
        echo -e "\033[0;32m[SUCCESS]\033[0m $(date '+%Y-%m-%d %H:%M:%S') $1" 
    }
    
    log_warning() { 
        echo -e "\033[1;33m[WARNING]\033[0m $(date '+%Y-%m-%d %H:%M:%S') $1" 
    }
    
    log_error() { 
        echo -e "\033[0;31m[ERROR]\033[0m $(date '+%Y-%m-%d %H:%M:%S') $1" 
    }
    
    # Check if command exists
    command_exists() {
        command -v "$1" >/dev/null 2>&1
    }
    
    # Retry function with exponential backoff
    retry_command() {
        local max_attempts="$1"
        local delay="$2"
        shift 2
        local command=("$@")
        
        for ((i=1; i<=max_attempts; i++)); do
            if "${command[@]}"; then
                return 0
            fi
            
            if [ $i -lt $max_attempts ]; then
                log_warning "Command failed (attempt $i/$max_attempts), retrying in ${delay}s..."
                sleep "$delay"
                delay=$((delay * 2))  # Exponential backoff
            fi
        done
        
        log_error "Command failed after $max_attempts attempts"
        return 1
    }
    
    # Validate environment variables
    check_required_vars() {
        local vars=("$@")
        local missing=()
        
        for var in "${vars[@]}"; do
            if [ -z "${!var:-}" ]; then
                missing+=("$var")
            fi
        done
        
        if [ ${#missing[@]} -ne 0 ]; then
            log_error "Missing required environment variables: ${missing[*]}"
            return 1
        fi
        
        return 0
    }
    
    # Clean up temporary files
    cleanup_temp_files() {
        local temp_dir="$1"
        local keep_files="${2:-false}"
        
        if [ "$keep_files" = "true" ]; then
            log_info "Keeping temporary files in: $temp_dir"
            return 0
        fi
        
        if [ -d "$temp_dir" ]; then
            log_info "Cleaning up temporary files: $temp_dir"
            rm -rf "$temp_dir"
        fi
    }