# BD SelfScan Enhanced Configuration Values
# This file contains enhanced configuration values for the BD SelfScan Helm chart
# Includes security best practices and DevSecOps improvements

# Global configuration
global:
  namespace: "bd-selfscan-system"

# Chart metadata
nameOverride: ""
fullnameOverride: ""

# Container registry configuration
registry:
  imagePullSecrets: []
  # Optional: Configure private registry authentication
  # imagePullSecrets:
  #   - name: "private-registry-secret"
  #   - name: "docker-hub-secret"

# RBAC configuration
rbac:
  create: true
  # Use cluster-wide permissions (required for multi-namespace scanning)
  clusterRole: true
  serviceAccount:
    create: true
    name: ""
    annotations: {}

# Black Duck configuration
blackduck:
  tokenSecretName: "blackduck-creds"
  trustCert: true
  connectionTimeout: 120
  readTimeout: 300
  # Additional Black Duck settings
  verifySsl: false  # Set to true in production with proper certificates
  apiVersion: "2023.7.0"  # Specify API version for compatibility

# On-demand scanning configuration (Phase 1)
onDemand:
  enabled: true

# Automated scanning configuration (Phase 2)
automated:
  enabled: false
  # Controller configuration for Phase 2
  controller:
    replicas: 1
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "500m"

# Scan target (for on-demand scanning)
scanTarget: ""

# Application configuration
applications: []

# ConfigMap configuration
configMap:
  applications:
    name: "bd-selfscan-applications"

# Scanner configuration with enhanced security
scanner:
  image: "ghcr.io/snps-steve/bd-selfscan/bd-selfscan:latest"
  imagePullPolicy: "Always"  # Changed to Always to ensure latest image with unzip fix

  # Resource limits and requests - optimized for performance and security
  resources:
    requests:
      memory: "2Gi"
      cpu: "500m"
      ephemeral-storage: "10Gi"
    limits:
      memory: "8Gi"
      cpu: "4"
      ephemeral-storage: "50Gi"

  # Job configuration
  job:
    backoffLimit: 3
    activeDeadlineSeconds: 3600
    ttlSecondsAfterFinished: 86400  # 24 hours
    parallelism: 1
    completions: 1

    # FIXED: Pod-level security context - properly configured for Black Duck scanning
    securityContext:
      # Black Duck requires root privileges for container operations
      runAsNonRoot: false    # Must be false for BD scanning
      runAsUser: 0           # Root user required
      runAsGroup: 0          # Root group
      fsGroup: 0             # File system group as root
      # Enhanced security where possible
      seccompProfile:
        type: RuntimeDefault
      supplementalGroups: []

  # FIXED: Container security context - minimal privileges for BD operations
  containerSecurityContext:
    # Essential for Black Duck container scanning
    allowPrivilegeEscalation: true     # Required for container operations
    readOnlyRootFilesystem: false      # BD tools need write access
    runAsUser: 0                       # Override Dockerfile USER scanner
    runAsGroup: 0
    runAsNonRoot: false               # Must be false for BD scanning
    
    # Capability management - grant only what Black Duck needs
    capabilities:
      drop:
        - ALL  # Start with minimal privileges
      add:
        - CHOWN          # Change file ownership
        - DAC_OVERRIDE   # Bypass file read/write/execute permission checks
        - FOWNER         # Bypass permission checks for file operations
        - SETGID         # Set group ID
        - SETUID         # Set user ID
        # Add SYS_ADMIN only if container operations fail without it
        # - SYS_ADMIN    # Uncomment if needed for advanced container operations

  # Node selection and scheduling
  nodeSelector: {}
  tolerations: []
  affinity: {}

  # Advanced scheduling for production
  # nodeSelector:
  #   node-type: "scanner-nodes"  # Dedicated nodes for scanning workloads
  # tolerations:
  #   - key: "scanner-only"
  #     operator: "Equal"
  #     value: "true"
  #     effect: "NoSchedule"

  # Docker socket access (disable for enhanced security)
  dockerSocket:
    enabled: false  # Preferred: false for security
    # enabled: true  # Only if container inspection requires direct Docker access

# Scanning configuration with enhanced controls
scanning:
  projectTier: 3
  policyFailSeverities: "CRITICAL,BLOCKER"

  # Performance tuning
  imageDownloadTimeout: 600
  imageDownloadRetries: 3
  scanTimeout: 1800
  maxConcurrentScans: 3
  maxConcurrentDownloads: 2

  # Cleanup and retention
  cleanupInterval: 7200
  keepSuccessfulJobs: 5
  keepFailedJobs: 10

  # Enhanced security scanning options
  enableVulnerabilityScanning: true
  enableLicenseScanning: true
  enableOperationalRisks: true

  # Policy enforcement
  enforceProjectTierPolicies: true
  blockDeploymentOnPolicyViolation: false  # Set to true for production enforcement

# Debug and observability configuration
debug:
  enabled: true
  logLevel: "INFO"  # DEBUG, INFO, WARNING, ERROR
  keepTempFiles: false
  enableVerboseLogging: false
  enablePerformanceMetrics: true

# Monitoring and observability
monitoring:
  enabled: true

  # Prometheus integration
  serviceMonitor:
    enabled: false  # Set to true if Prometheus operator is available
    interval: "30s"
    scrapeTimeout: "10s"
    labels: {}

  # Grafana dashboard
  grafana:
    enabled: false
    dashboardLabel: "grafana_dashboard"
    datasource: "Prometheus"

  # Health checks and probes
  healthCheck:
    enabled: true
    endpoint: "/health"
    port: 8081
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 3

# Network security configuration
networkPolicy:
  enabled: false  # Enable for production environments

  # Ingress rules (incoming traffic)
  ingress:
    - from: []  # Allow from any source (customize as needed)
      ports:
        - protocol: TCP
          port: 8081  # Health check port

  # Egress rules (outgoing traffic)
  egress:
    # Allow Kubernetes API access
    - to:
        - namespaceSelector:
            matchLabels:
              name: kube-system
      ports:
        - protocol: TCP
          port: 443

    # Allow Black Duck server access
    - to: []  # Customize with specific server endpoints
      ports:
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 80

    # Allow container registry access
    - to: []
      ports:
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 80

    # DNS resolution
    - to: []
      ports:
        - protocol: UDP
          port: 53

# Pod Security Standards compliance
podSecurityStandards:
  enforce: "baseline"  # baseline, restricted, privileged
  audit: "restricted"
  warn: "restricted"

  # Custom pod security policy (if needed)
  customPodSecurityPolicy:
    enabled: false
    name: "bd-selfscan-psp"

# Advanced configuration
advanced:
  # Custom environment variables
  extraEnvVars: []
  # - name: CUSTOM_VAR
  #   value: "custom-value"

  # Additional volumes
  extraVolumes: []
  # - name: custom-config
  #   configMap:
  #     name: custom-config-map

  # Additional volume mounts
  extraVolumeMounts: []
  # - name: custom-config
  #   mountPath: /etc/custom
  #   readOnly: true

  # Custom annotations
  podAnnotations: {}
  # annotation-key: "annotation-value"

  # Priority class for pod scheduling
  priorityClassName: ""
  # priorityClassName: "high-priority"

  # Pod disruption budget
  podDisruptionBudget:
    enabled: false
    minAvailable: 1
    # maxUnavailable: 1

# Backup and disaster recovery
backup:
  enabled: false
  schedule: "0 2 * * *"  # Daily at 2 AM
  retention: "7d"

  # Configuration backup
  configBackup:
    enabled: true
    includeSecrets: false  # Don't backup secrets for security

  # Results backup (to external storage)
  resultsBackup:
    enabled: false
    storage:
      type: "s3"  # s3, gcs, azure
      bucket: ""
      prefix: "bd-selfscan-backups/"

# Testing and validation
testing:
  enabled: false

  # Test configuration validation
  validateConfig: true
  validateConnectivity: true
  validatePermissions: true

  # Load testing
  loadTest:
    enabled: false
    concurrentScans: 5
    testDuration: "10m"

# ADDED: Security context profiles for different environments
securityProfiles:
  # Development profile - more permissive for troubleshooting
  development:
    job:
      securityContext:
        runAsNonRoot: false
        runAsUser: 0
        runAsGroup: 0
        fsGroup: 0
    container:
      securityContext:
        allowPrivilegeEscalation: true
        readOnlyRootFilesystem: false
        runAsUser: 0
        capabilities:
          drop: ["ALL"]
          add: ["CHOWN", "DAC_OVERRIDE", "FOWNER", "SETGID", "SETUID"]

  # Production profile - enhanced security where possible
  production:
    job:
      securityContext:
        runAsNonRoot: false  # Still false due to BD requirements
        runAsUser: 0
        runAsGroup: 0
        fsGroup: 0
        seccompProfile:
          type: RuntimeDefault
    container:
      securityContext:
        allowPrivilegeEscalation: true  # Required for BD
        readOnlyRootFilesystem: false   # Required for BD
        runAsUser: 0
        capabilities:
          drop: ["ALL"]
          add: ["DAC_OVERRIDE", "FOWNER"]  # Minimal set

# ADDED: Troubleshooting helpers
troubleshooting:
  # Enable debug pod for testing
  debugPod:
    enabled: false
    image: "ghcr.io/snps-steve/bd-selfscan/bd-selfscan:latest"
    command: ["/bin/bash", "-c", "sleep 3600"]

  # Log aggregation
  logCollection:
    enabled: true
    retention: "7d"